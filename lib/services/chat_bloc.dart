import 'dart:async';
import 'dart:convert';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:encrypt/encrypt.dart' as encrypt;
import 'package:shared_preferences/shared_preferences.dart';
import '../models/message_entity.dart';
import '../utils/app_logger.dart';

// Events
abstract class ChatEvent {}

class LoadMessagesEvent extends ChatEvent {
  final String chatId;
  LoadMessagesEvent(this.chatId);
}

class SendMessageEvent extends ChatEvent {
  final String chatId;
  final String content;
  final MessageType type;
  final String senderId;
  final int? voiceDurationSeconds;
  SendMessageEvent({
    required this.chatId,
    required this.content,
    required this.type,
    required this.senderId,
    this.voiceDurationSeconds,
  });
}

class ResetChatEvent extends ChatEvent {
  ResetChatEvent();
}

// States
abstract class ChatState {}

class ChatInitial extends ChatState {}

class ChatLoading extends ChatState {}

class ChatLoaded extends ChatState {
  final List<MessageEntity> messages;
  ChatLoaded(this.messages);
}

class ChatError extends ChatState {
  final String message;
  ChatError(this.message);
}

class ChatBloc extends Bloc<ChatEvent, ChatState> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseStorage _storage = FirebaseStorage.instance;
  StreamSubscription<QuerySnapshot>? _messagesSubscription;
  
  // –ö–ª—é—á–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
  late encrypt.Key _encryptionKey;
  late encrypt.IV _iv;
  bool _isEncryptionReady = false;

  ChatBloc() : super(ChatInitial()) {
    on<LoadMessagesEvent>(_onLoadMessages);
    on<SendMessageEvent>(_onSendMessage);
    on<ResetChatEvent>(_onResetChat);
    _initEncryption();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
  Future<void> _initEncryption() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      String? storedKey = prefs.getString('encryption_key');
      String? storedIv = prefs.getString('encryption_iv');
      
      if (storedKey != null && storedIv != null) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        _encryptionKey = encrypt.Key(base64Decode(storedKey));
        _iv = encrypt.IV(base64Decode(storedIv));
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
        _encryptionKey = encrypt.Key.fromSecureRandom(32);
        _iv = encrypt.IV.fromSecureRandom(16);
        
        await prefs.setString('encryption_key', base64Encode(_encryptionKey.bytes));
        await prefs.setString('encryption_iv', base64Encode(_iv.bytes));
      }
      
      _isEncryptionReady = true;
      AppLogger.info('Encryption initialized successfully');
    } catch (e) {
      AppLogger.error('Failed to initialize encryption', e, StackTrace.current);
      _isEncryptionReady = false;
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
      _encryptionKey = encrypt.Key.fromLength(32);
      _iv = encrypt.IV.fromLength(16);
    }
  }

  void _onLoadMessages(LoadMessagesEvent event, Emitter<ChatState> emit) async {
    emit(ChatLoading());
    try {
      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      await _messagesSubscription?.cancel();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      if (!_isEncryptionReady) {
        await _initEncryption();
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º StreamController –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ Firestore –≤ –ø–æ—Ç–æ–∫, 
      // —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ BLoC
      final controller = StreamController<List<MessageEntity>>();
      
      _messagesSubscription = _firestore
          .collection('chats')
          .doc(event.chatId)
          .collection('messages')
          .orderBy('timestamp', descending: true)
          .limit(50) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
          .snapshots()
          .listen(
        (snapshot) {
          try {
            final messages = snapshot.docs.map((doc) {
              try {
                final data = doc.data();
                final messageType = MessageType.values[data['type'] ?? 0];

                // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
                if (messageType == MessageType.text && data['text'] != null) {
                  try {
                    data['text'] = _decryptMessage(data['text']);
                  } catch (e) {
                    AppLogger.error('Failed to decrypt message', e, StackTrace.current);
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π
                    data['text'] = '[Encrypted message]';
                  }
                }

                return MessageEntity.fromMap({
                  ...data,
                  'id': doc.id,
                  'chatId': event.chatId,
                  'timestamp': data['timestamp'] ?? Timestamp.now(),
                });
              } catch (e) {
                AppLogger.error('Error parsing message', e, StackTrace.current);
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∞—à–∞
                return MessageEntity.system(
                  id: doc.id,
                  chatId: event.chatId,
                  text: 'Error loading message',
                  timestamp: DateTime.now(),
                );
              }
            }).toList();
            
            controller.add(messages);
          } catch (e) {
            AppLogger.error('Error processing messages', e, StackTrace.current);
            controller.addError(e);
          }
        },
        onError: (error) {
          AppLogger.error('Error in messages stream', error, StackTrace.current);
          controller.addError(error);
        },
      );
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ç–æ–∫ –∏–∑ StreamController
      await emit.forEach<List<MessageEntity>>(
        controller.stream,
        onData: (messages) => ChatLoaded(messages),
        onError: (error, _) => ChatError('Error loading messages: ${error.toString().split('\n').first}'),
      );
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
      await controller.close();
    } catch (e) {
      AppLogger.error('Failed to load messages', e, StackTrace.current);
      emit(ChatError('Failed to load messages. Please try again.'));
    }
  }

  void _onSendMessage(SendMessageEvent event, Emitter<ChatState> emit) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
      if (!_isEncryptionReady) {
        await _initEncryption();
      }

      final messageData = {
        'type': event.type.index,
        'senderId': event.senderId,
        'timestamp': FieldValue.serverTimestamp(),
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—è
      switch (event.type) {
        case MessageType.text:
          messageData['text'] = _encryptMessage(event.content);
          break;
        case MessageType.image:
          messageData['mediaUrl'] = event.content;
          break;
        case MessageType.file:
          messageData['mediaUrl'] = event.content;
          messageData['mediaName'] = event.content.split('/').last;
          break;
        case MessageType.voice:
          messageData['mediaUrl'] = event.content;
          if (event.voiceDurationSeconds != null) {
            messageData['voiceDurationSeconds'] = event.voiceDurationSeconds as int;
          }
          break;
        case MessageType.system:
          messageData['text'] = event.content;
          break;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
      await _firestore
          .collection('chats')
          .doc(event.chatId)
          .collection('messages')
          .add(messageData);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
      String lastMessage = '';
      switch (event.type) {
        case MessageType.text:
          lastMessage = event.content;
          break;
        case MessageType.image:
          lastMessage = 'üì∑ Image';
          break;
        case MessageType.file:
          lastMessage = 'üìé File: ${event.content.split('/').last}';
          break;
        case MessageType.voice:
          lastMessage = 'üé§ Voice message';
          break;
        case MessageType.system:
          lastMessage = event.content;
          break;
      }

      await _firestore.collection('chats').doc(event.chatId).update({
        'lastMessage': lastMessage,
        'lastMessageTime': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      AppLogger.error('Failed to send message', e, StackTrace.current);
      emit(ChatError('Failed to send message. Please try again.'));
    }
  }

  void _onResetChat(ResetChatEvent event, Emitter<ChatState> emit) async {
    // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await _messagesSubscription?.cancel();
    _messagesSubscription = null;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ
    emit(ChatInitial());
    AppLogger.info('Chat state reset');
  }

  String _encryptMessage(String message) {
    if (!_isEncryptionReady) {
      return message; // –ï—Å–ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    }
    
    try {
      final encrypter = encrypt.Encrypter(encrypt.AES(_encryptionKey));
      return encrypter.encrypt(message, iv: _iv).base64;
    } catch (e) {
      AppLogger.error('Failed to encrypt message', e, StackTrace.current);
      return message;
    }
  }

  String _decryptMessage(String encryptedMessage) {
    if (!_isEncryptionReady) {
      return encryptedMessage; // –ï—Å–ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    }
    
    try {
      final encrypter = encrypt.Encrypter(encrypt.AES(_encryptionKey));
      return encrypter.decrypt64(encryptedMessage, iv: _iv);
    } catch (e) {
      AppLogger.error('Failed to decrypt message', e, StackTrace.current);
      throw e; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
    }
  }

  @override
  Future<void> close() {
    _messagesSubscription?.cancel();
    return super.close();
  }
} 